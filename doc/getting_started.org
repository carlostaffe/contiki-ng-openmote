* Border Router
** tunslip
   Lanzarlo desde una aplicación con RPL-BR
   #+begin_src bash
     make TARGET=openmote PORT=/dev/ttyUSB0 connect-router
   #+end_src
* rpl+coap
En este escenario se tien un router de borde conectado a motes con servidores coap.


** rpl-border-router
1) Ubicarse dentro del directorio =examples/rpl-border-router=
2) Colocar la variable =PREFIX= en el Makefile 
   #+begin_src 
PREFIX = 2801:1e:4007:c0da::1/64 
   #+end_src
3) Compilar con make
   #+begin_src 
  make TARGET=openmote border-router
   #+end_src
4) Cargar el firmware al moter
   #+begin_src 
  make TARGET=openmote PORT=/dev/ttyUSBX border-router.upload
   #+end_src
5) Iniciar el router de borde:
   #+begin_src 
  make TARGET=openmote PORT=/dev/ttyUSBX connect-router
   #+end_src
   
** coap-example-server

1) Ubicarse dentro del directorio =examples/coap/coap-example-server/=
2) Compilar con make
   #+begin_src 
  make TARGET=openmote coap-example-server
   #+end_src
3) Cargar el firmware al moter
   #+begin_src 
  make TARGET=openmote PORT=/dev/ttyUSBX coap-example-server.upload
   #+end_src
4) (opcional) ver log desde el puerto serie
   #+begin_src 
  make TARGET=openmote PORT=/dev/ttyUSBX login
   #+end_src

** verificar conexión
1) Ver los dispositivos conectados al router de borde (red rpl)
   #+begin_src 
  wget -6 "http://[<ipv6-border-router>]/"; cat index.html; rm index.html
   #+end_src
3) ping a cada uno
   #+begin_src 
  ping6 -I tun0 <ipv6-mote-coap>
   #+end_src
   
3) el cliente coap de npm no me funciona, en su lugar lo pruebo con la librería =aiocoap= de python:
#+begin_src python
from aiocoap import *

uri_tty1 = "coap://[2801:1e:4007:c0da:212:4b00:60d:97ea]/.well-known/core"
async def main():
    protocol = await Context.create_client_context()

    request = Message(code=GET, uri=uri_tty1)

    try:
        response = await protocol.request(request).response
    except Exception as e:
        print('Failed to fetch resource:')
        print(e)
    else:
        print('Result: %s\n%r'%(response.code, response.payload))
        
asyncio.get_event_loop().run_until_complete(main())
#+end_src
Si todo funciona el nodo responde:

#+DOWNLOADED: /tmp/screenshot.png @ 2019-09-17 20:10:55
[[file:images/getting_started/screenshot_2019-09-17_20-10-55.png]]

* rpl+tsch+coap
1) Realizar los pasos de <<rpl+coap>>
2) Agregar el flag =MAKE_MAC= a =example/rpl-border-router= y =example/coap/coap-example-server=:
  #+begin_src 
  MAKE_MAC = MAKE_MAC_TSCH

  MODULES += os/services/shell
  #+end_src
  (opcional) añadir el módulo =shell= a =MODULES= para poder interactuar a través del puerto serie con los motes.
3) Limpiar, compilar y cargar los programas
   #+begin_src 
   make distclean
   make TARGET=openmote coap-example-server.upload PORT=/dev/ttyUSBX
   make TARGET=openmote border-router.upload PORT=/dev/ttyUSBX
   #+end_src
4) Iniciar el router de borde:
   #+begin_src 
  make TARGET=openmote PORT=/dev/ttyUSBX connect-router
   #+end_src
5) Realizar las comprobaciones con ping y aiocoap como se indicó en <<verificar conexión>>
6) Hacer login a uno de los motes con servidor CoAP con:
   #+begin_src 
  make TARGET=openmote PORT=/dev/ttyUSBX login
   #+end_src
   Presionar enter una vez que se ingresa para obtener un prompt. 
   Escribir =tsch-status= y verificar que en el resultado se encuentre en 1 =Is associated= y
que el =Time source= sea la ipv6 del router de borde.

#+DOWNLOADED: /tmp/screenshot.png @ 2019-09-17 20:47:32
[[file:images/getting_started/screenshot_2019-09-17_20-47-32.png]]

